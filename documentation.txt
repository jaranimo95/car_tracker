Documentation

For the indexible minimum priority queue, I used the book code as a basis for my changes,
since they'd already gone ahead and taken care of most of the complicated underlying 
dependencies that would've made the PQ difficult to implement from scratch (pq[] and qp[],
sink/swim methods, iterator implementation, etc.). To start with editing, I removed the
support for generics to better tailor the queue to work on Car objects alone. I decided to
use 2 separate PQ's for price and mileage, seeing as adding/removing is as simple as adding/
removing to/from both upon request, and finding the minimum price/mileage car requires only a
minCar() method call. I renamed most of the methods in IndexMinPQ.java for better first-glance 
identification of their functionality.

To determine whether an operation is being done on the price PQ or the mileage PQ, I set a global
mode. In decrease()/increase(), mode affects what field of the Car object is being compared
(price or mileage, respectively). The use of this throughout the rest of my program is identical.

As far as the retrieval operations are concerned, my methods run with an average case Theta(log n) as
I am doing a simple tree traversal for each of them. In my getLowestByMake/Model methods, I build up a
copy of the pq in question (price or mileage), so that I can simply call minCar() in conjunction with
delMin(), which I use if min car is of a different model/make. This allows me to always find the minimum
price/mileage per make/model. Although this building up of a copy queue takes n time to accomplish,
the actual search through the structure takes O(log n) time to do, which is why I consider the search
time to be logarithmic. 

My space requirements for add/remove are O(1), while for lowest by make/model, it is O(n).